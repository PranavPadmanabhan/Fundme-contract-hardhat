{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    // constant and immutable keywords save gas\n    address public immutable owner;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    mapping(address => uint256) public addressToAmount;\n    address[] public funders;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"not Authorized\");\n        _;\n    }\n\n    function fund() public payable {\n        // want to set minimum value\n\n        require(\n            msg.value.getConversionRate(priceFeed) > MINIMUM_USD,\n            \"amount should be greater than 1\"\n        );\n        funders.push(msg.sender);\n        addressToAmount[msg.sender] += msg.value;\n        // want to send ether\n    }\n\n    function withdraw() external payable onlyOwner {\n        address[] memory _funders = funders;\n        for (uint256 i = 0; i < _funders.length; i++) {\n            address funder = _funders[i];\n            addressToAmount[funder] = 0;\n        }\n        funders = new address[](0);\n\n        // withdraw money\n\n        // //transfer\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // //send\n        // bool success =  payable(msg.sender).send(address(this).balance);\n        // require(success,\"send failed\");\n\n        // call\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    // if the transaction is done without msg.data then recieve function will be triggered\n\n    // else fallback\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return priceFeed;\n    }\n\n    function getFunders() public view returns (address[] memory) {\n        return funders;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getUSDPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (\n            ,\n            /*uint80 roundID*/\n            int256 price, /*uint startedAt*/\n            ,\n            ,\n\n        ) = /*uint timeStamp*/\n            /*uint80 answeredInRound*/\n            priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(uint256 amount, AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 ethPrice = getUSDPrice(priceFeed);\n        uint256 totalAmount = (ethPrice * amount) / 1e18;\n        return totalAmount;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}